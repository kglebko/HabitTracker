// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const LS_KEY = 'ht_habits_v2';
const ICONS = {
  water: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2C12 2 6 8 6 12a6 6 0 1 0 12 0c0-4-6-10-6-10z" fill="currentColor"/></svg>`,
  book: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 6a2 2 0 0 1 2-2h13v14a1 1 0 0 1-1 1H6a2 2 0 0 1-2-2V6z" fill="currentColor"/></svg>`,
  dumbbell: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M20 8h-2v8h2V8zM6 8H4v8h2V8zM8 10h8v4H8v-4z" fill="currentColor"/></svg>`,
  star: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M12 2l2.6 6.9L21 10l-5 3.6L17.2 21 12 17.7 6.8 21 8 13.6 3 10l6.4-1.1L12 2z" fill="currentColor"/></svg>`,
  heart: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" fill="currentColor"/></svg>`,
  check: `<svg width="22" height="22" viewBox="0 0 24 24" fill="none"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" fill="currentColor"/></svg>`
};

// --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
let state = {
  habits: [],
  selectedHabitId: null,
  viewYear: new Date().getFullYear(),
  viewMonth: new Date().getMonth(),
  showAllHabits: false,
  statsPeriod: 'week' // 'week' –∏–ª–∏ 'month'
};

// --- DOM —ç–ª–µ–º–µ–Ω—Ç—ã ---
const habitsListEl = document.getElementById('habitsList');
const addHabitBtn = document.getElementById('addHabitBtn');
const addHabitModal = document.getElementById('addHabitModal');
const habitTitleInput = document.getElementById('habitTitle');
const habitColorInput = document.getElementById('habitColor');
const iconChoicesEl = document.getElementById('iconChoices');
const saveHabitBtn = document.getElementById('saveHabitBtn');
const cancelHabitBtn = document.getElementById('cancelHabitBtn');
const calendarEl = document.getElementById('calendar');
const currentMonthEl = document.getElementById('currentMonth');
const prevMonthBtn = document.getElementById('prevMonth');
const nextMonthBtn = document.getElementById('nextMonth');
const selectedHabitInfo = document.getElementById('selectedHabitInfo');
const weekPercentEl = document.getElementById('weekPercent');
const totalChecksEl = document.getElementById('totalChecks');
const progressCircle = document.getElementById('progressCircle');
const progressText = document.getElementById('progressText');
const viewModeText = document.getElementById('viewModeText');
const deleteHabitBtn = document.getElementById('deleteHabitBtn');
const toastEl = document.getElementById('toast');
const themeToggle = document.getElementById('themeToggle');
const exportBtn = document.getElementById('exportBtn');
const toggleViewMode = document.getElementById('toggleViewMode');

// --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ ---
function formatDate(d) {
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const dd = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${dd}`;
}

function parseYMD(ymd) { 
  return new Date(ymd + "T00:00:00"); 
}

function isToday(date) {
  return formatDate(date) === formatDate(new Date());
}

function isFutureDate(date) {
  return date > new Date();
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ ---
function getWeekRange(date = new Date()) {
  const day = date.getDay();
  const monday = new Date(date);
  const diff = date.getDate() - day + (day === 0 ? -6 : 1);
  monday.setDate(diff);
  
  const sunday = new Date(monday);
  sunday.setDate(monday.getDate() + 6);
  
  return {
    start: new Date(monday),
    end: new Date(sunday)
  };
}

function getMonthRange(date = new Date()) {
  const start = new Date(date.getFullYear(), date.getMonth(), 1);
  const end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  return { start, end };
}

function getDatesForPeriod(period, date = new Date()) {
  const dates = [];
  let range;
  
  if (period === 'week') {
    range = getWeekRange(date);
  } else {
    range = getMonthRange(date);
  }
  
  const current = new Date(range.start);
  while (current <= range.end) {
    dates.push(new Date(current));
    current.setDate(current.getDate() + 1);
  }
  
  return dates;
}

// --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
function getStats(habit = null, period = 'week') {
  const today = new Date();
  const dates = getDatesForPeriod(period, today);
  
  if (habit) {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    const completed = dates.filter(date => {
      const dateStr = formatDate(date);
      return habit.checks[dateStr];
    }).length;
    
    const total = dates.length; // –í—Å–µ–≥–¥–∞ –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
    
    return {
      completed,
      total,
      percent: total > 0 ? Math.round((completed / total) * 100) : 0,
      period: period
    };
  } else {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    let totalCompleted = 0;
    let totalPossible = dates.length * state.habits.length;
    
    state.habits.forEach(habit => {
      dates.forEach(date => {
        if (habit.checks[formatDate(date)]) {
          totalCompleted++;
        }
      });
    });
    
    return {
      completed: totalCompleted,
      total: totalPossible,
      percent: totalPossible > 0 ? Math.round((totalCompleted / totalPossible) * 100) : 0,
      period: period
    };
  }
}

function getHabitStats(habit) {
  const weekStats = getStats(habit, 'week');
  const monthStats = getStats(habit, 'month');
  const totalChecks = Object.keys(habit.checks).length;
  
  return { 
    total: totalChecks, 
    week: weekStats,
    month: monthStats
  };
}

// --- –†–∞–±–æ—Ç–∞ —Å localStorage ---
function loadState() {
  try {
    const raw = localStorage.getItem(LS_KEY);
    if (raw) {
      const saved = JSON.parse(raw);
      state.habits = saved.habits || [];
      state.selectedHabitId = saved.selectedHabitId || null;
      state.showAllHabits = saved.showAllHabits || false;
      state.statsPeriod = saved.statsPeriod || 'week';
    }
  } catch (e) { 
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
    showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
}

function saveState() {
  try {
    localStorage.setItem(LS_KEY, JSON.stringify({
      habits: state.habits,
      selectedHabitId: state.selectedHabitId,
      showAllHabits: state.showAllHabits,
      statsPeriod: state.statsPeriod
    }));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
    showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
  }
}

// --- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ ---
function createHabit(name, icon, color) {
  return {
    id: 'h_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 5),
    name: name.trim(),
    icon: icon,
    color: color,
    checks: {},
    createdAt: new Date().toISOString()
  };
}

function findHabit(id) { 
  return state.habits.find(h => h.id === id); 
}

// --- –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ ---
function renderHabits() {
  habitsListEl.innerHTML = '';
  
  if (state.habits.length === 0) {
    habitsListEl.innerHTML = `
      <li class="empty-state">
        <div style="text-align: center; padding: 20px; color: var(--muted);">
          <div style="font-size: 48px; margin-bottom: 8px;">üìä</div>
          <div>–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø—É—Å—Ç</div>
          <small>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É</small>
        </div>
      </li>`;
    return;
  }

  state.habits.forEach(habit => {
    const stats = getHabitStats(habit);
    const currentStats = state.statsPeriod === 'week' ? stats.week : stats.month;
    const isSelected = state.selectedHabitId === habit.id && !state.showAllHabits;
    
    const li = document.createElement('li');
    li.className = `habit-item ${isSelected ? 'selected' : ''} ${state.showAllHabits ? 'dimmed' : ''}`;
    li.dataset.id = habit.id;
    
    li.innerHTML = `
      <div class="habit-icon" style="background:${habit.color}">
        ${ICONS[habit.icon] || ICONS.star}
      </div>
      <div class="habit-content">
        <div class="habit-title">${habit.name}</div>
        <div class="habit-meta">
          <small>${stats.total} –æ—Ç–º–µ—Ç–æ–∫ ‚Ä¢ ${currentStats.percent}% –∑–∞ ${state.statsPeriod === 'week' ? '–Ω–µ–¥–µ–ª—é' : '–º–µ—Å—è—Ü'}</small>
        </div>
      </div>
    `;

    li.addEventListener('click', () => {
      state.showAllHabits = false;
      state.selectedHabitId = habit.id;
      saveState();
      renderAll();
    });

    habitsListEl.appendChild(li);
  });
}

// --- –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
function renderCalendar() {
  calendarEl.innerHTML = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  weekdays.forEach(day => {
    const dayEl = document.createElement('div');
    dayEl.className = 'weekday';
    dayEl.textContent = day;
    calendarEl.appendChild(dayEl);
  });

  const year = state.viewYear;
  const month = state.viewMonth;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
  currentMonthEl.textContent = new Date(year, month).toLocaleString('ru-RU', {
    month: 'long',
    year: 'numeric'
  });

  const firstOfMonth = new Date(year, month, 1);
  const startDay = (firstOfMonth.getDay() + 6) % 7; // –ü–Ω = 0
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  for (let i = 0; i < 42; i++) { // 6 –Ω–µ–¥–µ–ª—å
    const cell = document.createElement('div');
    cell.className = 'day';
    
    if (i < startDay || i >= startDay + daysInMonth) {
      cell.classList.add('empty');
      calendarEl.appendChild(cell);
      continue;
    }

    const dayNum = i - startDay + 1;
    const currentDate = new Date(year, month, dayNum);
    const dateStr = formatDate(currentDate);
    
    cell.dataset.date = dateStr;
    
    if (isToday(currentDate)) {
      cell.classList.add('today');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –±—É–¥—É—â–∏—Ö –¥–∞—Ç
    if (isFutureDate(currentDate)) {
      cell.classList.add('future');
    }

    // –ù–æ–º–µ—Ä –¥–Ω—è
    const dayNumber = document.createElement('div');
    dayNumber.className = 'day-num';
    dayNumber.textContent = dayNum;
    cell.appendChild(dayNumber);

    // –û—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫
    if (state.showAllHabits && state.habits.length > 0) {
      // –†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      const dotsContainer = document.createElement('div');
      dotsContainer.className = 'dots';
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–æ—á–µ–∫ –¥–æ 6
      const habitsToShow = state.habits.slice(0, 6);
      
      habitsToShow.forEach(habit => {
        if (habit.checks[dateStr]) {
          const dot = document.createElement('div');
          dot.className = 'habit-dot';
          dot.style.background = habit.color;
          dot.title = `${habit.name} - ${formatDate(currentDate)}`;
          dotsContainer.appendChild(dot);
        }
      });
      
      if (dotsContainer.children.length > 0) {
        cell.classList.add('multi-marked');
        cell.appendChild(dotsContainer);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 6
        if (state.habits.length > 6) {
          const extraCount = state.habits.slice(6).filter(h => h.checks[dateStr]).length;
          if (extraCount > 0) {
            const extraBadge = document.createElement('div');
            extraBadge.className = 'extra-badge';
            extraBadge.textContent = `+${extraCount}`;
            extraBadge.title = `–ï—â–µ ${extraCount} –ø—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`;
            cell.appendChild(extraBadge);
          }
        }
      }
      
    } else if (state.selectedHabitId) {
      // –†–µ–∂–∏–º –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      const habit = findHabit(state.selectedHabitId);
      if (habit && habit.checks[dateStr]) {
        const dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.background = habit.color;
        cell.appendChild(dot);
        cell.classList.add('marked');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    cell.addEventListener('click', () => handleDayClick(dateStr, cell, currentDate));
    calendarEl.appendChild(cell);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é ---
function handleDayClick(dateStr, cell, date) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥—É—â–∞—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–∞
  if (isFutureDate(date)) {
    showToast('–ù–µ–ª—å–∑—è –æ—Ç–º–µ—á–∞—Ç—å –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã!', 2000);
    return;
  }

  if (state.showAllHabits) {
    // –í —Ä–µ–∂–∏–º–µ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const completedHabits = state.habits.filter(habit => habit.checks[dateStr]);
    if (completedHabits.length > 0) {
      const habitNames = completedHabits.map(h => h.name).join(', ');
      showToast(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ (${formatDate(date)}): ${habitNames}`, 3000);
    } else {
      showToast('–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏');
    }
    return;
  }

  if (!state.selectedHabitId) {
    showToast('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É —Å–ª–µ–≤–∞');
    return;
  }

  const habit = findHabit(state.selectedHabitId);
  if (!habit) return;

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
  if (habit.checks[dateStr]) {
    delete habit.checks[dateStr];
    cell.classList.remove('marked');
    const dot = cell.querySelector('.dot');
    if (dot) dot.remove();
  } else {
    habit.checks[dateStr] = true;
    const dot = document.createElement('div');
    dot.className = 'dot';
    dot.style.background = habit.color;
    cell.appendChild(dot);
    cell.classList.add('marked');
  }

  saveState();
  renderSelectedHabitInfo();
}

// --- –†–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ ---
function renderSelectedHabitInfo() {
  if (state.showAllHabits) {
    // –†–µ–∂–∏–º –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    const totalChecks = state.habits.reduce((sum, habit) => 
      sum + Object.keys(habit.checks).length, 0
    );
    
    const stats = getStats(null, state.statsPeriod);
    const periodTotal = state.statsPeriod === 'week' ? 7 : new Date(state.viewYear, state.viewMonth + 1, 0).getDate();
    
    selectedHabitInfo.innerHTML = `
      <div class="habit-icon" style="background:var(--accent)">üëÅÔ∏è</div>
      <div>
        <div style="font-weight:600">–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏</div>
        <div style="font-size:12px;color:var(--muted)">
          ${stats.completed}/${periodTotal} –¥–Ω–µ–π (${stats.percent}%)
        </div>
      </div>
    `;
    
    viewModeText.textContent = '–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏';
    updateProgress(stats.percent, '#00BCD4');
    updateStatsDisplay(stats, periodTotal);
    
  } else if (state.selectedHabitId) {
    // –†–µ–∂–∏–º –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    const habit = findHabit(state.selectedHabitId);
    if (!habit) return;

    const stats = getStats(habit, state.statsPeriod);
    const periodTotal = state.statsPeriod === 'week' ? 7 : new Date(state.viewYear, state.viewMonth + 1, 0).getDate();
    
    selectedHabitInfo.innerHTML = `
      <div class="habit-icon" style="background:${habit.color}">
        ${ICONS[habit.icon] || ICONS.star}
      </div>
      <div>
        <div style="font-weight:600">${habit.name}</div>
        <div style="font-size:12px;color:var(--muted)">
          ${stats.completed}/${periodTotal} –¥–Ω–µ–π (${stats.percent}%)
        </div>
      </div>
    `;
    
    viewModeText.textContent = habit.name;
    updateProgress(stats.percent, habit.color);
    updateStatsDisplay(stats, periodTotal);
    
  } else {
    // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    selectedHabitInfo.innerHTML = `<small>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫</small>`;
    viewModeText.textContent = '‚Äî';
    updateProgress(0, '#00BCD4');
    updateStatsDisplay({completed: 0, total: 0, percent: 0});
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–±–æ–≤ ---
function setupTabButtons() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  
  tabButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const period = btn.dataset.period;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      tabButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      state.statsPeriod = period;
      saveState();
      renderAll();
    });
  });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞ ---
function updateStatsPeriodText() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  tabButtons.forEach(btn => {
    if (btn.dataset.period === state.statsPeriod) {
      btn.classList.add('active');
    } else {
      btn.classList.remove('active');
    }
  });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
function updateStatsDisplay(stats, periodTotal = null) {
  const totalDisplay = periodTotal || stats.total;
  weekPercentEl.textContent = `${stats.percent}%`;
  totalChecksEl.textContent = `${stats.completed}/${totalDisplay}`;
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–∫—Ä—É–≥–∞ ---
function updateProgress(percent, color) {
  const p = Math.max(0, Math.min(100, percent));
  const dash = `${p},100`;
  
  progressCircle.setAttribute('stroke-dasharray', dash);
  progressCircle.style.stroke = color || 'var(--primary)';
  progressText.textContent = p + '%';
}

// --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---
function toggleAllHabitsView() {
  state.showAllHabits = !state.showAllHabits;
  if (state.showAllHabits) {
    toggleViewMode.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É';
    toggleViewMode.classList.add('active');
  } else {
    toggleViewMode.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏';
    toggleViewMode.classList.remove('active');
  }
  saveState();
  renderAll();
}

// --- –†–µ–Ω–¥–µ—Ä –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
function renderAll() {
  renderHabits();
  renderCalendar();
  renderSelectedHabitInfo();
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–æ–∫ ---
function renderIconChoices() {
  iconChoicesEl.innerHTML = '';
  Object.entries(ICONS).forEach(([key, svg]) => {
    const btn = document.createElement('button');
    btn.type = 'button';
    btn.className = 'icon-choice';
    btn.innerHTML = svg;
    btn.dataset.icon = key;
    btn.addEventListener('click', () => {
      document.querySelectorAll('.icon-choice').forEach(n => n.classList.remove('selected'));
      btn.classList.add('selected');
    });
    iconChoicesEl.appendChild(btn);
  });
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const firstIcon = iconChoicesEl.querySelector('.icon-choice');
  if (firstIcon) firstIcon.classList.add('selected');
}

// --- Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
let toastTimer = null;
function showToast(text, duration = 2000) {
  toastEl.textContent = text;
  toastEl.classList.remove('hidden');
  
  if (toastTimer) clearTimeout(toastTimer);
  toastTimer = setTimeout(() => {
    toastEl.classList.add('hidden');
  }, duration);
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π ---
function applyTheme(theme) {
  document.body.className = theme;
  localStorage.setItem('ht_theme', theme);
}

function loadTheme() {
  const saved = localStorage.getItem('ht_theme') || 'light';
  applyTheme(saved);
}

// --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º ---
function navigateMonth(direction) {
  state.viewMonth += direction;
  if (state.viewMonth < 0) {
    state.viewMonth = 11;
    state.viewYear--;
  } else if (state.viewMonth > 11) {
    state.viewMonth = 0;
    state.viewYear++;
  }
  renderAll(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
}

// --- –≠–∫—Å–ø–æ—Ä—Ç –≤ PNG ---
function exportToPNG() {
  const mainArea = document.querySelector('.main-area');
  
  html2canvas(mainArea, {
    backgroundColor: getComputedStyle(document.body).getPropertyValue('--bg'),
    scale: 2,
    useCORS: true
  }).then(canvas => {
    const link = document.createElement('a');
    link.download = `habits-${formatDate(new Date())}.png`;
    link.href = canvas.toDataURL('image/png');
    link.click();
  }).catch(e => {
    console.error('Export error:', e);
    showToast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
  });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
function setupEventListeners() {
  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫
  addHabitBtn.addEventListener('click', () => {
    habitTitleInput.value = '';
    habitColorInput.value = '#4caf50';
    document.querySelectorAll('.icon-choice').forEach(n => n.classList.remove('selected'));
    const firstIcon = iconChoicesEl.querySelector('.icon-choice');
    if (firstIcon) firstIcon.classList.add('selected');
    addHabitModal.classList.remove('hidden');
    habitTitleInput.focus();
  });

  cancelHabitBtn.addEventListener('click', () => addHabitModal.classList.add('hidden'));

  saveHabitBtn.addEventListener('click', () => {
    const name = habitTitleInput.value.trim();
    if (!name) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
      return;
    }

    const iconEl = document.querySelector('.icon-choice.selected');
    const icon = iconEl ? iconEl.dataset.icon : 'star';
    const color = habitColorInput.value;

    const habit = createHabit(name, icon, color);
    state.habits.unshift(habit);
    state.selectedHabitId = habit.id;
    state.showAllHabits = false;

    saveState();
    addHabitModal.classList.add('hidden');
    renderAll();
    showToast('–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
  });

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  prevMonthBtn.addEventListener('click', () => navigateMonth(-1));
  nextMonthBtn.addEventListener('click', () => navigateMonth(1));

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
  toggleViewMode.addEventListener('click', toggleAllHabitsView);

  // –¢–∞–±—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  setupTabButtons();

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
  deleteHabitBtn.addEventListener('click', () => {
    if (!state.selectedHabitId && !state.showAllHabits) {
      showToast('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    if (state.showAllHabits) {
      showToast('–í—ã–π–¥–∏—Ç–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫');
      return;
    }

    const habit = findHabit(state.selectedHabitId);
    if (!habit) return;

    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É "${habit.name}" –∏ –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ?`)) return;

    const index = state.habits.findIndex(h => h.id === state.selectedHabitId);
    state.habits.splice(index, 1);
    state.selectedHabitId = state.habits.length > 0 ? state.habits[0].id : null;

    saveState();
    renderAll();
    showToast('–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
  });

  // –¢–µ–º–∞
  themeToggle.addEventListener('click', () => {
    const next = document.body.classList.contains('dark') ? 'light' : 'dark';
    applyTheme(next);
  });

  // –≠–∫—Å–ø–æ—Ä—Ç
  exportBtn.addEventListener('click', exportToPNG);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
  addHabitModal.addEventListener('click', (e) => {
    if (e.target === addHabitModal) {
      addHabitModal.classList.add('hidden');
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !addHabitModal.classList.contains('hidden')) {
      addHabitModal.classList.add('hidden');
    }
  });
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
function initApp() {
  loadTheme();
  loadState();
  renderIconChoices();
  setupEventListeners();
  updateStatsPeriodText();
  renderAll();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
  toggleViewMode.textContent = state.showAllHabits ? 
    '–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏';
  
  if (state.showAllHabits) {
    toggleViewMode.classList.add('active');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
document.addEventListener('DOMContentLoaded', initApp);